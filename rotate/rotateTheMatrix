Note: Try to solve this task in-place (with O(1) additional memory), since this is what you'll be asked to do during an interview.

You are given an n x n 2D matrix that represents an image. Rotate the image by 90 degrees (clockwise).

Example

For

a = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]

the output should be

rotateImage(a) =
    [[7, 4, 1],
     [8, 5, 2],
     [9, 6, 3]]

Input/Output

    [execution time limit] 3 seconds (java)

    [input] array.array.integer a

    Guaranteed constraints:
    1 ≤ a.length ≤ 100,
    a[i].length = a.length,
    1 ≤ a[i][j] ≤ 104.
code:-
int[][] rotateImage(int[][] a) {
/*if(a.length==0||a.length!=a[0].length){
    return new int[][]{0,0};
}*/
int n=a.length;
for(int layer=0;layer<n/2;layer++){
    int first=layer;
    int last=n-1-layer;
    for(int i=first;i<last;i++){
        int offset=i-first;
        int top = a[first][i];
        a[first][i]=a[last-offset][first];
        a[last-offset][first]=a[last][last-offset];
        a[last][last-offset]=a[i][last];
        a[i][last]=top;
    }

}
return a;

}
